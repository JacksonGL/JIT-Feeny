var n = 6

; stack A is [1, 2, 3, ..., n]
var stackA = array(n, 0)
var x = n
while x > 0 :
    stackA[x - 1] = x
    x = x - 1

; stack B is [0, 0, 0, ..., 0]
var stackB = array(n, 0)

; stack C is [0, 0, 0, ..., 0]
var stackC = array(n, 0)


; a function that returns the stack name
; according to its index
defn printStackName (i) :
    if i == 0 : printf("A")
    else if i == 1 : printf("B")
    else if i == 2 : printf("C")

defn getTopPlateIndex (i) :
    var stack = getStack(i)
    var index = 0
    var result = -1 ; empty stack's top plate index is -1
    while index < n :
        if stack[index] > 0 :
            if index == 0 : result = index
            else if stack[index - 1] == 0 : result = index
        index = index + 1
    result

defn getTopPlate (i) :
    var stack = getStack(i)
    stack[getTopPlateIndex(i)]

defn getStack (i):
    if i == 0 : stackA
    else if i == 1 : stackB
    else if i == 2 : stackC

; move the top plate on stack i to stack j
defn movePlate (i, j) :
    var stackI = getStack(i)
    var stackJ = getStack(j)
    var topIndexI = getTopPlateIndex(i)
    var topIndexJ = getTopPlateIndex(j)
    if topIndexJ == -1 :
        topIndexJ = n
    stackJ[topIndexJ - 1] = stackI[topIndexI]
    stackI[topIndexI] = 0

; a function that moves the top m plates 
; on stack i to stack j, stack k is the intermediate stack
defn move (m, i, j, k) :
    if m > 0 :
        move(m - 1, i, k, j)
        printf("Move plate ~ from ", getTopPlate(i))
        printStackName(i)
        printf(" stack to ")
        printStackName(j)
        printf(" stack\n")
        movePlate(i, j)
        move(m - 1, k, j, i)

; move all six plates from stack A to stack C, using stack B
; as the intermediate stack
move(n, 0, 1, 2)
