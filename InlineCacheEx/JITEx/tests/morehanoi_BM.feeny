
; helpers for defensive coding
defn not (v) : ; helper
    if v :
        null
    else :
        1

defn assert (v) : ; I like a 'die' function
    if not(v) :
        printf("Assert failed!\n")
        v < 0

; END helpers for defensive coding

; Print helper to circumvent no strings printing
defn printMove (val, in, out) :
    printf("Move plate ~ from ", val)
    in.printName()
    printf(" to ")
    out.printName()
    printf("\n")

; A simple stack
defn stack (max_size) :
    object :
        var arr = array(max_size, -1)
        var size = 0
        method pop () :
            this.size = this.size - 1
            this.arr[this.size]
        method push (v) :
            this.arr[this.size] = v
            this.size = this.size + 1
        method empty () :
            this.size == 0
        method peek () :
            this.arr[this.size - 1]

; Stack with a name and with some defensive coding asserts
defn hanoi_stack (name, max_size) :
    object :
        var st = stack(max_size)
        var nameid = name
        method add (v) : ; push with invariant check
            if this.st.empty() :
                this.st.push(v)
            else :
                assert(this.st.peek() > v)
                this.st.push(v)
        method take () : ; pop (stack takes care of non-empty req)
            this.st.pop()
        method printName () : ; helper since we no have strings
            if this.nameid == 0 :
                printf("A")
            else :
                if this.nameid == 1 :
                    printf("B")
                else :
                    printf("C")
            printf(" stack")

; main implementation
defn moveOne (ins, out) :
    printMove(ins.st.peek(), ins, out)
    out.add(ins.take())

defn _hanoi (ins, outs, other, ns) :
    if ns > 0 :
        _hanoi(ins, other, outs, ns - 1)
        moveOne(ins, outs)
        _hanoi(other, outs, ins, ns - 1)

; END main implementation

; Simple calling function
defn hanoi (max) :
    var a = hanoi_stack(0, max)
    var t = max
    while t > 0 :
        a.add(t)
        t = t - 1
    var c = hanoi_stack(2, max)
    _hanoi(a, c, hanoi_stack(1, max), max)

    ; The following are only for to catch errors
    assert(c.st.peek() == 1) ; if the top is 1 and all plates
    assert(c.st.arr.length() == max) ; are there, it should be right
                                     ; given the hanoi_stack.add asserts
    assert(a.st.empty()) ; just to make sure we didn't lose a plate

hanoi(6)
